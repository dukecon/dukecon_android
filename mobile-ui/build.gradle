apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'io.fabric'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def javalandReleaseKeystorePropertiesFile = rootProject.file("../dukecon/dukecon_app_releases/javaland/javalandReleaseKeystore.properties")
def apexReleaseKeystorePropertiesFile = rootProject.file("../dukecon/dukecon_app_releases/apex/apexReleaseKeystore.properties")
def doagReleaseKeystorePropertiesFile = rootProject.file("../dukecon/dukecon_app_releases/doag/doagReleaseKeystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def javalandReleaseKeystoreProperties = new Properties()

// Initialize a new Properties() object called keystoreProperties.
def apexReleaseKeystoreProperties = new Properties()

// Initialize a new Properties() object called keystoreProperties.
def doagReleaseKeystoreProperties = new Properties()

if (javalandReleaseKeystorePropertiesFile.canRead()) {
    // Load your keystore.properties file into the keystoreProperties object.
    javalandReleaseKeystoreProperties.load(new FileInputStream(javalandReleaseKeystorePropertiesFile))
}

if (apexReleaseKeystorePropertiesFile.canRead()) {
    // Load your keystore.properties file into the keystoreProperties object.
    apexReleaseKeystoreProperties.load(new FileInputStream(apexReleaseKeystorePropertiesFile))
}

if (doagReleaseKeystorePropertiesFile.canRead()) {
    // Load your keystore.properties file into the keystoreProperties object.
    doagReleaseKeystoreProperties.load(new FileInputStream(doagReleaseKeystorePropertiesFile))
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
    buildToolsVersion globalConfiguration["androidBuildToolsVersion"]

    defaultConfig {
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]
        versionCode buildConfig.version.code
        versionName buildConfig.version.name
        multiDexEnabled = false
        testInstrumentationRunner "org.buffer.android.boilerplate.ui.test.TestRunner"
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        javalandRelease {
            keyAlias javalandReleaseKeystoreProperties['keyAlias']
            keyPassword javalandReleaseKeystoreProperties['keyPassword']
            storeFile rootProject.file("../dukecon/dukecon_app_releases/javaland/" + javalandReleaseKeystoreProperties['storeFile'])
            storePassword javalandReleaseKeystoreProperties['storePassword']
        }
        apexRelease {
            keyAlias apexReleaseKeystoreProperties['keyAlias']
            keyPassword apexReleaseKeystoreProperties['keyPassword']
            storeFile rootProject.file("../dukecon/dukecon_app_releases/apex/" + apexReleaseKeystoreProperties['storeFile'])
            storePassword apexReleaseKeystoreProperties['storePassword']
        }
        doagconRelease {
            keyAlias doagReleaseKeystoreProperties['keyAlias']
            keyPassword doagReleaseKeystoreProperties['keyPassword']
            storeFile rootProject.file("../dukecon/dukecon_app_releases/doag/" + doagReleaseKeystoreProperties['storeFile'])
            storePassword doagReleaseKeystoreProperties['storePassword']
        }
        debug {
            storeFile file("debug.keystore")
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFile 'proguard-release-app.pro'
            signingConfig signingConfigs.javalandRelease
        }
    }

    dexOptions {
        preDexLibraries = false
        dexInProcess = false
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
    }

    flavorDimensions "dukecon"

    productFlavors {
        javaland {
            dimension "dukecon"
            applicationIdSuffix ".javaland"
        }

        apexconn {
            dimension "dukecon"
            applicationIdSuffix ".apexconnect"
        }

        apachecon {
            dimension "dukecon"
            applicationIdSuffix ".apachecon"
        }

        doagcon {
            dimension "dukecon"
            applicationIdSuffix ".doag"
        }
    }
}

kapt {
    correctErrorTypes = true
}

configurations.all {
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}

dependencies {
    def mobileUiDependencies = rootProject.ext.mobileUiDependencies
    def mobileUiTestDependencies = rootProject.ext.mobileUiTestDependencies

    implementation project(':presentation')
    implementation project(':data')
    implementation project(':cache')
    implementation project(':remote')

    implementation mobileUiDependencies.javaxAnnotation

    implementation mobileUiDependencies.kotlin
    implementation mobileUiDependencies.coroutines
    implementation mobileUiDependencies.javaxInject
    implementation mobileUiDependencies.androidAnnotations

    implementation mobileUiDependencies.cardview
    implementation mobileUiDependencies.supportRecyclerView
    implementation mobileUiDependencies.material
    implementation mobileUiDependencies.coordinatorlayout
    implementation mobileUiDependencies.constraintlayout
    implementation mobileUiDependencies.appCompat
    implementation mobileUiDependencies.timber
    implementation mobileUiDependencies.picasso
    implementation mobileUiDependencies.dagger
    implementation mobileUiDependencies.daggerSupport
    implementation mobileUiDependencies.kotlinLogging
    implementation mobileUiDependencies.slf4jAndroid
    implementation mobileUiDependencies.firebaseCore
    implementation mobileUiDependencies.crashlytics
    implementation mobileUiDependencies.okHttp
    implementation mobileUiDependencies.okHttpLogger
    implementation mobileUiDependencies.retrofit
    implementation mobileUiDependencies.retrofitConverter
    implementation mobileUiDependencies.browser
    implementation mobileUiDependencies.androidxCore
    implementation mobileUiDependencies.androidThreeTen
    implementation mobileUiDependencies.threeTenConverters
    
    testImplementation mobileUiTestDependencies.kotlinJUnit

    kapt mobileUiDependencies.daggerCompiler
    kapt mobileUiDependencies.daggerProcessor
    compileOnly mobileUiDependencies.glassfishAnnotation

    // Instrumentation test dependencies
    androidTestImplementation mobileUiTestDependencies.junit
    androidTestImplementation mobileUiTestDependencies.mockito
    androidTestImplementation mobileUiTestDependencies.mockitoAndroid

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.1.1'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.1.1'

    kaptTest mobileUiDependencies.daggerCompiler
    kaptAndroidTest mobileUiDependencies.daggerCompiler
}

apply plugin: 'com.google.gms.google-services'
